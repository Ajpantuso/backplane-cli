// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/cli/session (interfaces: BackplaneSessionInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
)

// MockBackplaneSessionInterface is a mock of BackplaneSessionInterface interface.
type MockBackplaneSessionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBackplaneSessionInterfaceMockRecorder
}

// MockBackplaneSessionInterfaceMockRecorder is the mock recorder for MockBackplaneSessionInterface.
type MockBackplaneSessionInterfaceMockRecorder struct {
	mock *MockBackplaneSessionInterface
}

// NewMockBackplaneSessionInterface creates a new mock instance.
func NewMockBackplaneSessionInterface(ctrl *gomock.Controller) *MockBackplaneSessionInterface {
	mock := &MockBackplaneSessionInterface{ctrl: ctrl}
	mock.recorder = &MockBackplaneSessionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackplaneSessionInterface) EXPECT() *MockBackplaneSessionInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBackplaneSessionInterface) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBackplaneSessionInterfaceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBackplaneSessionInterface)(nil).Delete))
}

// RunCommand mocks base method.
func (m *MockBackplaneSessionInterface) RunCommand(arg0 *cobra.Command, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockBackplaneSessionInterfaceMockRecorder) RunCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockBackplaneSessionInterface)(nil).RunCommand), arg0, arg1)
}

// Setup mocks base method.
func (m *MockBackplaneSessionInterface) Setup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockBackplaneSessionInterfaceMockRecorder) Setup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockBackplaneSessionInterface)(nil).Setup))
}

// Start mocks base method.
func (m *MockBackplaneSessionInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBackplaneSessionInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBackplaneSessionInterface)(nil).Start))
}
