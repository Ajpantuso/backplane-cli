// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/pagerduty (interfaces: PagerDutyClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	pagerduty "github.com/PagerDuty/go-pagerduty"
	gomock "github.com/golang/mock/gomock"
)

// MockPagerDutyClient is a mock of PagerDutyClient interface.
type MockPagerDutyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPagerDutyClientMockRecorder
}

// MockPagerDutyClientMockRecorder is the mock recorder for MockPagerDutyClient.
type MockPagerDutyClientMockRecorder struct {
	mock *MockPagerDutyClient
}

// NewMockPagerDutyClient creates a new mock instance.
func NewMockPagerDutyClient(ctrl *gomock.Controller) *MockPagerDutyClient {
	mock := &MockPagerDutyClient{ctrl: ctrl}
	mock.recorder = &MockPagerDutyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagerDutyClient) EXPECT() *MockPagerDutyClientMockRecorder {
	return m.recorder
}

// GetCurrentUser mocks base method.
func (m *MockPagerDutyClient) GetCurrentUser(arg0 pagerduty.GetCurrentUserOptions) (*pagerduty.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", arg0)
	ret0, _ := ret[0].(*pagerduty.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockPagerDutyClientMockRecorder) GetCurrentUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockPagerDutyClient)(nil).GetCurrentUser), arg0)
}

// GetIncidentAlert mocks base method.
func (m *MockPagerDutyClient) GetIncidentAlert(arg0, arg1 string) (*pagerduty.IncidentAlertResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentAlert", arg0, arg1)
	ret0, _ := ret[0].(*pagerduty.IncidentAlertResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIncidentAlert indicates an expected call of GetIncidentAlert.
func (mr *MockPagerDutyClientMockRecorder) GetIncidentAlert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentAlert", reflect.TypeOf((*MockPagerDutyClient)(nil).GetIncidentAlert), arg0, arg1)
}

// GetService mocks base method.
func (m *MockPagerDutyClient) GetService(arg0 string, arg1 *pagerduty.GetServiceOptions) (*pagerduty.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*pagerduty.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockPagerDutyClientMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockPagerDutyClient)(nil).GetService), arg0, arg1)
}

// GetServiceWithContext mocks base method.
func (m *MockPagerDutyClient) GetServiceWithContext(arg0 context.Context, arg1 string, arg2 *pagerduty.GetServiceOptions) (*pagerduty.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pagerduty.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext.
func (mr *MockPagerDutyClientMockRecorder) GetServiceWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockPagerDutyClient)(nil).GetServiceWithContext), arg0, arg1, arg2)
}

// ListIncidentAlerts mocks base method.
func (m *MockPagerDutyClient) ListIncidentAlerts(arg0 string) (*pagerduty.ListAlertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidentAlerts", arg0)
	ret0, _ := ret[0].(*pagerduty.ListAlertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidentAlerts indicates an expected call of ListIncidentAlerts.
func (mr *MockPagerDutyClientMockRecorder) ListIncidentAlerts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentAlerts", reflect.TypeOf((*MockPagerDutyClient)(nil).ListIncidentAlerts), arg0)
}

// ListIncidents mocks base method.
func (m *MockPagerDutyClient) ListIncidents(arg0 pagerduty.ListIncidentsOptions) (*pagerduty.ListIncidentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidents", arg0)
	ret0, _ := ret[0].(*pagerduty.ListIncidentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidents indicates an expected call of ListIncidents.
func (mr *MockPagerDutyClientMockRecorder) ListIncidents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidents", reflect.TypeOf((*MockPagerDutyClient)(nil).ListIncidents), arg0)
}

// ListOnCalls mocks base method.
func (m *MockPagerDutyClient) ListOnCalls(arg0 pagerduty.ListOnCallOptions) (*pagerduty.ListOnCallsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOnCalls", arg0)
	ret0, _ := ret[0].(*pagerduty.ListOnCallsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOnCalls indicates an expected call of ListOnCalls.
func (mr *MockPagerDutyClientMockRecorder) ListOnCalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOnCalls", reflect.TypeOf((*MockPagerDutyClient)(nil).ListOnCalls), arg0)
}
